@layer eds.input {
  .eds-input {
    /*temporary vars to figure colors*/
    --eds-input-color-text-initial: light-dark(#565656, #c2c8cc);
    --eds-input-color-text-focus: light-dark(#3d3d3d, #ffffff);
    --eds-input-color-text-disabled: light-dark(#bebebe, #52616d);
    --eds-input-color-surface-initial-on-level-1: light-dark(#ffffff, #00000047);
    --eds-input-color-surface-initial-on-level-2: light-dark(#f7f7f7, #00000047);
    --eds-input-color-border-initial: light-dark(#b3b3b3, #ffffff29);
    --eds-input-color-border-focus: light-dark(#007079, #97cace);
    --eds-input-color-message-border-success-initial: #3fa13d;
    --eds-input-color-message-border-success-focus: light-dark(#15682d, #7bcf78);
    --eds-input-color-message-border-warning-initial: #e57e00;
    --eds-input-color-message-border-warning-focus: light-dark(#7f4600, #ffae74);
    --eds-input-color-message-border-error-initial: #e20337;
    --eds-input-color-message-border-error-focus: light-dark(#90042c, #ff8a8a);

    /*generated focus color*/
    /*the calculations can technically be global tokens*/
    --rcs-input-border-focus-light: calc(l * 0.75) c h;
    --rcs-input-border-focus-dark: calc(l * 1.3) calc(c * 0.8) h;
    /*this has to be local due to the input color*/
    --_eds-input-color-message-border-focus: light-dark(
      oklch(from var(--_outline-color) var(--rcs-input-border-focus-light)),
      oklch(from var(--_outline-color) var(--rcs-input-border-focus-dark))
    );
    /*end temp vars */
    box-sizing: border-box;
    display: grid;
    grid-template-columns: auto 1fr auto;
    align-items: center;
    > input {
      border: 0;
      outline: 0;
      font-family: inherit;
      font-size: inherit;
      font-weight: inherit;
      line-height: inherit;
      color: inherit;
      background-color: transparent;
      height: 1lh;
      /* total height target: comfortable 24px spacious 36px */
      --_trim: calc(-1 * (1lh - 1cap) / 2);
      margin-block: round(down, var(--_trim), 4px);
    }
    > .adornments {
      display: grid;
      gap: 8px;
      align-items: center;
      svg {
        margin-block: -0.5em;
      }
    }
    --_outline-color: transparent;
    outline-color: var(--_outline-color);
    outline-width: var(--eds-sizing-stroke-thin);
    outline-width: 1px;
    outline-style: solid;
    box-shadow: 0 1px 0 0 var(--eds-input-color-border-initial);
    background-color: var(--eds-input-color-surface-initial-on-level-1);
    color: var(--eds-input-color-text-initial);
    padding-block: var(--eds-spacing-inset-xs-stack-stretched);
    padding-inline: var(--eds-spacing-inset-xs-inline);
    font-size: var(--eds-typography-ui-body-md-font-size);
    font-family: var(--eds-typography-ui-body-font-family);
    font-weight: var(--eds-typography-ui-body-md-font-weight-normal);
    line-height: var(--eds-typography-ui-body-md-lineheight-squished);

    &:where(.error, .warning, .success, :focus-within) {
      box-shadow: none;
    }
    &.error {
      --_outline-color: var(--eds-input-color-message-border-error-initial);
      &.debug {
        --_outline-color: var(--eds-input-color-message-border-error-focus);
      }
    }
    &.warning {
      --_outline-color: var(--eds-input-color-message-border-warning-initial);
      &.debug {
        --_outline-color: var(--eds-input-color-message-border-warning-focus);
      }
    }
    &.success {
      --_outline-color: var(--eds-input-color-message-border-success-initial);
      &.debug {
        --_outline-color: var(--eds-input-color-message-border-success-focus);
      }
    }
    &:where(:focus-within, .debug) {
      outline-width: var(--eds-sizing-stroke-thick);
      color: var(--eds-input-color-text-focus);
    }
    &.initial:focus-within {
      --_outline-color: var(--eds-input-color-border-focus);
    }
    &:focus-within:not(.initial, .debug) {
      outline-color: var(--_eds-input-color-message-border-focus);
    }
    &:has(:disabled) {
      --_outline-color: transparent;
      color: var(--eds-input-color-text-disabled);
    }
  }

}

