@layer eds.input {
  .eds-input {
    box-sizing: border-box;
    display: grid;
    grid-template-columns: auto 1fr auto;
    /*spacing between icon and text should be font-size * 0.618 according to EDS 2.0 Spacing & Typography Documentation.
    Rounding to nearest 0.5px yields the exact same values as the --eds-spacing-icon tokens */
    gap: round(0.618em, 0.5px);
    align-items: center;
    cursor: text;
    > input {
      border: 0;
      outline: 0;
      font-family: inherit;
      font-size: inherit;
      font-weight: inherit;
      line-height: inherit;
      padding: 0;
      color: inherit;
      background-color: transparent;
      height: 1lh;
      /* total height target: comfortable: 24px, spacious: 36px */
      --_trim: calc(-1 * (1lh - 1cap) / 2);
      margin-block: round(nearest, var(--_trim), 2px);
      &::placeholder {
        color: var(--eds-color-text-subtle);
      }
    }
    > .adornments {
      display: grid;
    /*spacing between icon and text should be font-size * 0.618 according to EDS 2.0 Spacing & Typography Documentation.
    Rounding to nearest 0.5px yields the exact same values as the --eds-spacing-icon tokens */
    gap: round(0.618em, 0.5px);
      align-items: center;
      svg {
        margin-block: -0.5em;
        fill: var(--_fill-color);
      }
    }
    --_outline-color: transparent;
    --_focus-outline-color: transparent;
    --_fill-color: var(--eds-color-text-subtle);
    --color: var(--NEUTRAL);
    outline-color: var(--_outline-color);
    outline-width: var(--eds-sizing-stroke-thin);
    outline-width: 1px;
    outline-style: solid;
    background-color: var(--eds-color-neutral-background-default);
    color: var(--eds-color-neutral-text-default);
    /*This solution adds padding to the input wrapper while leaving the input height as cap-height to hit the target height.
    Perhaps it is possible to reach target height using text-box-trim and moving the padding inside input for a less hacky solution*/
    padding-block: var(--eds-spacing-inset-xs-stack-stretched);
    padding-inline: var(--eds-spacing-inset-xs-inline);
    font-size: var(--eds-typography-ui-body-md-font-size);
    font-family: var(--eds-typography-ui-body-font-family);
    font-weight: var(--eds-typography-ui-body-md-font-weight-normal);
    line-height: var(--eds-typography-ui-body-md-lineheight-squished);

    /*Ok these selectors are a bit messy and can probably be simplified in some smarter way*/
    &:where(.error, .warning, .success, :has(:user-invalid), :has(:user-valid), :focus-within) {
      --_outline-color: var(--eds-color-border-default);
      --_focus-outline-color: var(--eds-color-border-strong);
    }
    &.initial:not(:focus-within):not(:has(:user-invalid)):not(:has(:user-valid)) {
      box-shadow: 0 1px 0 0 var(--eds-color-neutral-border-default);
    }
    &:not(.initial) {
      box-shadow: none;
    }
      /*Just messing around testing how data-color space-toggles can be used*/
    &.initial:focus-within {
      --color: var(--ACCENT);
    }
    &:is(&.error, &:has(:user-invalid)) {
      --color: var(--DANGER);
    }
    &.warning {
      --color: var(--WARNING);
    }
    &:is(&.success, &:has(:user-valid)) {
      --color: var(--SUCCESS);
    }
    &:where(:focus-within) {
      outline-width: var(--eds-sizing-stroke-thick);
      --_fill-color: var(--eds-color-text-default);
      outline-color: var(--_focus-outline-color);
      box-shadow: none;
    }

    &:has(:disabled) {
      opacity: 0.3;
    }
  }

}

